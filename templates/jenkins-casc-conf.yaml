# Copyright (c) 2018, Siddhi Inc. (http://www.Siddhi.org) All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-casc-conf
data:
  global-config.yaml: |-
    unclassified:
      globalLibraries:
        libraries:
          - name: "Siddhi-jenkins-shared-lib"
            defaultVersion: master
            retriever:
              modernSCM:
                scm:
                  git:
                    remote: "https://github.com/Aaquiff/jenkins-shared-lib"
    credentials:
      system:
        domainCredentials:
          - credentials:
              - usernamePassword:
                  scope: GLOBAL
                  id: github_credentials
                  username: ${GITHUB_USERNAME}
                  password: ${GITHUB_PASSWORD}
    jenkins:
      systemMessage: "Siddhi CI/CD Setup"
      securityRealm:
        local:
          allowsSignup: false
          users:
            - id: "{{ .Values.jenkins.username }}"
              password: "{{ .Values.jenkins.password }}"
      authorizationStrategy: loggedInUsersCanDoAnything
    jobs:
      {{- $namespace := .Release.Namespace }}
      {{- range .Values.applications }}
      {{- $application := . }}
      - script: >
          folder("{{ $application.name }}")
      {{- range $index, $image := .images }}
      - script: >
          job("{{ $application.name }}/{{ $image.repository }}-image") {
            description()
            logRotator(10)
            keepDependencies(false)
            disabled(false)
            concurrentBuild(true)
            scm {
                git {
                    remote {
                        name('docker-repo')
                        url('{{ $image.gitRepo }}')
                        credentials('github_credentials')
                    }
                }
            }
            triggers {
              cron('@daily')
            }
            steps {
              shell("""
                timestamp() {
                  date +\"%Y%m%d%H%M%S\"
                }

                IMAGE_NAME={{ $image.organization }}/{{ $image.repository }}:`timestamp`
                docker login hub.docker.com -u \$SIDDHI_USERNAME -p \$SIDDHI_PASSWORD
                docker build -t \$IMAGE_NAME .
                docker login -u \$REGISTRY_USERNAME -p \$REGISTRY_PASSWORD
                docker push \$IMAGE_NAME""")
            }
          }
      - script: >
          job("{{ $application.name }}/{{ $image.repository }}-artifacts") {
            description()
            logRotator(10)
            keepDependencies(false)
            disabled(false)
            concurrentBuild(true)
            scm {
                git {
                    remote {
                        name('docker-repo')
                        url('{{ $image.gitRepo }}')
                        credentials('github_credentials')
                    }
                }
            }
            triggers {
                scm('* * * * *')
            }
            steps {
              shell("""
                TAG=`docker images {{ $image.organization }}/{{ $image.repository }} --format '{{ "{{ .Tag }}" }}' | sort -nrk1 | head -1`
                sed -i "s|{{ $image.SiddhiImage }}|{{ $image.organization }}/{{ $image.repository }}:\$TAG|" Dockerfile
                docker build -t {{ $image.organization }}/{{ $image.repository }}:\$TAG .
                docker login -u \$REGISTRY_USERNAME -p \$REGISTRY_PASSWORD
                docker push {{ $image.organization }}/{{ $image.repository }}:\$TAG""")
            }
          }
      {{- end }}
      - script: >
          job("{{ .name }}/chart") {
            description()
            logRotator(10)
            keepDependencies(false)
            disabled(false)
            concurrentBuild(true)
            scm {
                git {
                    remote {
                        name('chart-repo')
                        url('{{ .chart.repo }}')
                        credentials('github_credentials')
                    }
                }
            }
            triggers {
                scm('* * * * *')
            }
            steps {
              shell(
              """
              cat {{ .chart.name }}/values-dev.yaml | base64 >test
              VALUES_DEV_CONTENT=`tr -d '\\n' < test`

              cat {{ .chart.name }}/values-staging.yaml | base64 >test
              VALUES_STAGING_CONTENT=`tr -d '\\n' < test`

              cat {{ .chart.name }}/values-prod.yaml | base64 >test
              VALUES_PROD_CONTENT=`tr -d '\\n' < test`

              CHART_PATH=`helm package {{ .chart.name }} | sed 's|Successfully packaged chart and saved it to: ||'`
              CHART_NAME=`basename \$CHART_PATH`
              cat \$CHART_NAME | base64 > test
              CHART_CONTENT=`tr -d '\\n' < test`

              curl -X POST --header "Content-Type: application/json" --request POST --data '{"artifacts": [ {"type": "embedded/base64","name": "'"\$CHART_NAME"'", "reference": "'"\$CHART_CONTENT"'" }, {"type": "embedded/base64","name": "values-dev.yaml","reference": "'"\$VALUES_DEV_CONTENT"'" }, {"type": "embedded/base64","name": "values-prod.yaml","reference": "'"\$VALUES_PROD_CONTENT"'" }, {"type": "embedded/base64","name": "values-staging.yaml","reference": "'"\$VALUES_STAGING_CONTENT"'" } ]}' http://spin-gate.{{ $namespace }}.svc.cluster.local:8084/webhooks/webhook/chart
              """)

            }
          }
      {{- end }}
